// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['components/user-interface', 'components/input/text-input'], function(UserInterface, TextInput) {
  /*
          A Google Maps based Route module for finding a origin and destination
          information with trip length.
  
          Requires: Google Maps API V3
  */

  var MapRoute;
  return MapRoute = (function(_super) {

    __extends(MapRoute, _super);

    function MapRoute(container, map, from, to, tripLength) {
      var mapRendererOptions, polylineOptions;
      this.container = container;
      this.map = map;
      this.from = from;
      this.to = to;
      if (tripLength == null) {
        tripLength = null;
      }
      this.toJson = __bind(this.toJson, this);

      this.updateRoute = __bind(this.updateRoute, this);

      this.calculateRoute = __bind(this.calculateRoute, this);

      MapRoute.__super__.constructor.call(this, this.container);
      new google.maps.places.SearchBox(this.from[0]);
      new google.maps.places.SearchBox(this.to[0]);
      if (tripLength) {
        this.tripLength = new TextInput(tripLength.parent().parent(), tripLength);
      }
      this.result;
      polylineOptions = {
        strokeColor: "#808080",
        strokeOpacity: .9,
        strokeWeight: 4
      };
      mapRendererOptions = {
        polylineOptions: polylineOptions
      };
      this.directionsDisplay = new google.maps.DirectionsRenderer();
      this.directionsService = new google.maps.DirectionsService();
      this.mapMarkers = [];
      this.directionsDisplay.setMap(this.map);
      this.from.change(this.calculateRoute);
      this.to.change(this.calculateRoute);
    }

    /*
                Uses Google Maps Directions API to calculate the route for the data
                entered by the user.
    */


    MapRoute.prototype.calculateRoute = function() {
      var from, request, to,
        _this = this;
      from = this.from.val().trim();
      to = this.to.val().trim();
      if (!from || !to) {
        return;
      }
      request = {
        origin: from,
        destination: to,
        travelMode: google.maps.TravelMode.DRIVING,
        region: 'uk'
      };
      return this.directionsService.route(request, function(result, status) {
        if (status === google.maps.DirectionsStatus.OK) {
          _this.directionsDisplay.setDirections(result);
          _this.result = result;
          _this.removeError();
          return _this.updateRoute();
        } else {
          _this.result = null;
          return _this.setError('No routes found.');
        }
      });
    };

    /*
                Updates the form on the page to reflect the results of a route.
    */


    MapRoute.prototype.updateRoute = function() {
      var leg, route;
      route = this.result['routes'][0];
      leg = route['legs'][0];
      this.from.val(leg['start_address']);
      this.to.val(leg['end_address']);
      if (this.tripLength) {
        return this.tripLength.setValue(leg['duration']['text']);
      }
    };

    /*
                Returns the route in JSON form if it exists.
    */


    MapRoute.prototype.toJson = function() {
      var destination, json, leg, length, origin, route;
      if (!this.result) {
        this.setError('No route specified.');
        return null;
      }
      route = this.result['routes'][0];
      leg = route['legs'][0];
      console.log(leg);
      origin = {
        address: leg['start_address'],
        lat: leg['start_location'].lat(),
        lon: leg['start_location'].lng()
      };
      destination = {
        address: leg['end_address'],
        lat: leg['end_location'].lat(),
        lon: leg['end_location'].lng()
      };
      json = {
        origin: origin,
        destination: destination
      };
      if (this.tripLength) {
        length = this.tripLength.getValue();
        if (!length) {
          return null;
        } else {
          json['trip_length'] = length;
        }
      }
      this.removeError();
      return json;
    };

    return MapRoute;

  })(UserInterface);
});
